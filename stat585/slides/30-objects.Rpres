STAT 585X
Object Models in R
===
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 4/4/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

Ouline
====

* Object oriented programming in R: methods and classes
* S3 versus S4 classes in R
* Example for S4 class

Object-Oriented Programming (OOP)
===

* Technically R is not OOP, but it does allow function and class-based programming
* Classes and associated Methods: 
  - A **class** is a description of a thing
  - A **method** is an implementation of a generic function  for an object of a particular class
  
```{r}
class(pi)
class("hello")
class(lm(rnorm(100)~rnorm(100)))
```

Methods
===

Methods allow us to adjust actions to different objects, e.g.:
```{r}
print('hello')
x <- rnorm(100); y <- rnorm(100)
print(lm(y~x))
```

The same function call (`print`) triggers different responses - in fact, the call goes to the default `print.default` method in the first case and `print.lm` for the second case.


Methods
===

Which methods exist?

```{r}
head(methods("print"))
tail(methods("print"))
length(methods("print"))
```

Methods
===

```{r}
print.lm
print(lm(y~x))
```

Writing Methods
===

```{r}
setMethod("print", "character", function(x = "character") {
  paste(x,"is a character")
})
print("hello")
print(LETTERS[1:3])
LETTERS[1:3]
```

Getting rid of the methods that I called ... 
===

Having the 'is a character' announcement after every string is a bit weird, so we do not want to keep this particular functionality:

```{r}
removeMethod("print", "character")
print("hello")
```


S3 versus S4 objects
===

* S3 is the old style of R objects
* S3 should - according to R style and package guidelines - no longer be used for new packages
* Googleâ€™s R style guide suggests ignoring S4 unless bindings to C++ are needed.
* generic functions can have both S3 and S4 methods
* S3 and S4 are conceptually the same but implemented very differently.
* S4 is more formal and rigorous. S3 more interactive and flexible.
S3 objects is defined by stating its class:
```
class(x) <- "new_S3_class"
```
* `setMethod` implements an S4 method, `showMethods` only shows S4 methods.
* telling the difference between S3 and S4:
```{r}
methods("princomp") # if any, list of all S3 methods
showMethods("princomp") # if any, list of all S4 methods
```

S4 objects
===

* S4 requires that classes and methods are registered, ensuring that the object has all the required components
* Stricter system, avoiding potential ambiguity of S3 classes
* Slots, @: are the elements of the object
* See `methods` package (not to be confused with methods function, which is S3)

Defining an S4 class
=== 

* important step in structuring your code: 
    * what are the key parts of your object?
    * how are you envisioning using the new object?
* there is usually a multitude of possibilities of how to organize a class - those decisions will have effects downstream in how efficiently/elegantly the remaining code can be written

* technically: call `setClass(classname, representation(x="numeric", y="character", z="some other class"))`


Example of S4 objects
===

On Kaggle: data for digit recognizer challenge (https://www.kaggle.com/c/digit-recognizer)

format of data is atrocious: rows of variables `label`, `pixel0`, `pixel1`, ..., `pixel783`

to describe a 28 x 28 grey-scale image and its associated label

let's define a class 'kaggle' for that

```{r}
setClass("kaggle", representation(label="integer", data="matrix"))
```

Now read some of the data:
```{r}
digits <- read.csv("http://dicook.github.io/stat585/data/train-digits.csv", nrows=15)
```

===

Converting a row to a kaggle object:

```{r}
k1 <- new("kaggle", label=digits[4,1], 
    data=matrix(unlist(digits[4,-1]), nrow=28, byrow=TRUE))
```

Now we need a print method:

```{r}
setMethod("print", "kaggle", function(x) {
  sprintf("label: %d", x@label)
  for (i in 1:28) {
    for (j in 1:28) { 
      if (x@data[i,j] == 0) cat(" ")
      else if (x@data[i,j] < 128) cat(".")
      else cat("*")
    }
    cat("\n")
  }
})
```

===

```{r,echo=-(1:7)}
setMethod("print", "kaggle", function(x) {
  for (i in 1:28) {
    for (j in 1:28) { 
      if (x@data[i,j] == 0) cat(" ")
      else if (x@data[i,j] < 128) cat(".")
      else cat("*")
    }
    cat("\n")
  }
  cat(sprintf("label: %d", x@label))
})
print(k1)
```

===

and a plotting routine ... 

```{r}
setMethod("image", "kaggle", function(x, ...) {
  require(RColorBrewer)
  image(t(x@data[28:1, 1:28]), col=brewer.pal(9, "Greys"))
})
image(k1)
```

===

```{r, fig.width=20}
ks <- sapply(1:nrow(digits), function(x) {
  new("kaggle", label=digits[x,1], 
    data=matrix(unlist(digits[x,-1]), nrow=28, byrow=TRUE))
  })

par(mfrow=c(3,5))
lapply(ks, image)
```

===

Now we could define method(s) that help us process the image information - e.g. proportion of pixels that are non-zero, centers of information in x and y direction, number of empty rows/columns,  ...