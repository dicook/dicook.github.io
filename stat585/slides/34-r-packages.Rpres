STAT 585X
Packages in R
===
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 4/14/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

Outline
===

* structure of existing R packages
* dependencies on other packages
* documenting code
* getting it on to CRAN

NAMESPACE
===

With ```roxygen2``` the NAMESPACE file is automatically generated.
Open the ```NAMESPACE``` file, and observe that it now contains the one line

```
export(hw)
```

Also notice that you now have a ```man``` directory containing ```hw.Rd```. This is an earlier markup language. 

```
\name{hw}
\alias{hw}
\title{One line descriptor}
\usage{
hw(x = "")
}
\arguments{
  \item{x}{character value, optional argument}
}
\description{
Description of the functionality in a paragraph
}
\examples{
hw("Heike")
}
```

Dependencies
===

Since we have been using the ```devtools``` package, let's take a look at its structure. Go to the [github page](https://github.com/hadley/devtools) for the package. The DESCRIPTION file has three different types of dependency: ```Depends, Imports, Suggests```:

```
Depends:
    R (>= 3.0.2)
Roxygen: list(wrap = FALSE)
Imports:
    httr (>= 0.2),
    RCurl,
...
    digest
Suggests:
    testthat (>= 0.7),
    roxygen2 (>= 3.0.0),
 ...
    rstudioapi
```

```Depends``` specifies the requirements that are minimal for the package, in this case R version 3.0.2 or later. ```Imports``` enables functions exported by another package to be utilized. ```Suggests``` enables more localized dependencies. 

Imports
===

You know how to ```export``` functions using ```roxygen2```, how do you specify importing functions from other packages. Open the ```NAMESPACE``` file. 

```
...
importFrom(RCurl,ftpUpload)
importFrom(digest,digest)
importFrom(evaluate,evaluate)
importFrom(evaluate,replay)
importFrom(httr,GET)
...
```

The function ```ftpUpload``` is imported from the package RCurl. This function is used in the ```devtools``` function ```release``` which is used to upload your package to CRAN, requiring ftp'ing the compressed archive to ```ftp://cran.R-project.org/incoming/```. 

Specifying imports
===

Examine the top of the file ```release.r```, and you will find the ```import``` specified in the roxygen documentation.

```

#' @param pkg package description, can be path or package name.  See
#'   \code{\link{as.package}} for more information
#' @param check if \code{TRUE}, run checking, otherwise omit it.  This
#'   is useful if you've just checked your package and you're ready to
#'   release it.
#' @export
#' @importFrom RCurl ftpUpload
```

If you want to use specific functions from another package --- good to build on others work, re-use no re-invent --- it an be specified very precisely here. 

BUT
===

You used the function ```document``` to build the documentation for your package ```miniR```, which uses the ```roxygen2``` package. However, ```roxygen2``` is only a suggested package. Why is this?

```
Suggests:
    testthat (>= 0.7),
    roxygen2 (>= 3.0.0),
    ...
```

Suggests is a much looser dependency. 

Suggests
===

The ```document``` function, specifically calls the ```roxygen``` functions. 

```
function (pkg = ".", clean = FALSE, roclets = c("collate", "namespace", 
    "rd"), reload = TRUE) 
{
    require("roxygen2")
    pkg <- as.package(pkg)
...
    if (clean) {
        if (packageVersion("roxygen2") < 3) {
            roxygen2::clear_caches()
        }
...
```

Because packages don't need to use ```roxygen2``` to document themselves, this package is not essential to the ```devtools``` package. However, ```roxygen2``` makes it much, much easier to do the documentation! 

Your turn
===

Expand your package so that it has 

- multiple code files, and 
- multiple functions, and
- imports and uses a function from another package.

Examples
===

Setting up example code in the documentation is reasonably simple:

```
#' @examples
#'  hw("Heike")
```

```{r}
library(miniR)
?hw
hw("Heike")
```

Example code has to run, and will be checked by the R package builder. If you want to provide sample code, but for some reason don't want it to be tested, you can enclose it in ```\dontrun{....}```.

Vignettes
===

With your knowledge on Rmarkdown, you can build a package vignette. Create a new directory called ```vignettes```, and create an initial file, called ```miniR.Rmd``` in this directory with thee lines at the top:

```
<!--
%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{My First R package}
-->

```

and add the following lines to your DESCRIPTION file:

```
VignetteBuilder: knitr
Suggests: knitr
```

and build the vignette using ```build_vignettes()```. This outputs the full package document into the directory ```inst/doc```.

Checking the distro
===

```check()``` does the CRAN check. Pay attention to any notes or warnings, although the warning about pdf documentation build can be ignored. 

```build()``` (or ```build_win()``` on Windows) makes the compressed source bundle to upload to CRAN. 

Uploading to CRAN requires ftp'ing the compressed source bundle and sending an email to the CRAN maintainer that the package is awaiting loading to CRAN. The ```release()``` function will handle these tasks. 