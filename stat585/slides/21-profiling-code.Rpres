STAT 585X
Profiling code
===
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 3/3/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

Signs of the inexperienced programmer 
===

- ***Vodoo Code*** - code that you don’t quite understand, but that ‘has to be there’ so that everything works.
- ***Yo-Yo Code*** - multiple conversions between different representations (e.g. numeric <-> character) for simple operations. 
- ***Bulldozers*** - code that may looks nicely structured (and general), but only works in one specific application.

Check functions
===

What does this code do?
How does it work?

```
stopifnot <- function (...) 
{
    k <- length(ll <- list(...))
    if (k == 0L) 
        return(invisible())
    mc <- match.call()
    for (i in 1L:k) if (!(is.logical(r <- ll[[i]]) && !any(is.na(r)) && 
        all(r))) {
        ch <- deparse(mc[[i + 1]], width.cutoff = 60L)
        if (length(ch) > 1L) 
            ch <- paste(ch[1L], "....")
        stop(paste(ch, " is not ", if (length(r) > 1L) 
            "all ", "TRUE", sep = ""), call. = FALSE)
    }
    invisible()
}
```

Step-by-step code checking
===

The ```browser()``` function allows stepping through your code.

```{r}
help(browser)
```

- ```n```= executes the next line of code
- ```c```= continue execution until the end of the function, and exit
- ```where``` gives you the stack information, the trace of the active function calls
- ```Q``` exits browser()

Simple alternatives
===

Putting in 

- ```cat()```
- ```str()```
- ```head()```
- ```summary()```
- ```print()```

are simple ways to build code up step-wise ensuring that each piece works

What is this?
===

```0L```, ```1L```

```{r}
cat(0L)
cat(1L)
```

Let's try browser()
===

```stopifnot2()``` function has ```browser()``` in first line of function

```
x <- 1
stopifnot2(x==x, 1+1==2, c(7+5==11.99999, 1+1==2))
```

Browser enables:

- printing of result of each line
- checking changes to values
- make sure that it results in what is expected

debug()
===

```debug()``` automatically places a ```browser()``` in the first line of function

```undebug()``` removes it.

Setting error handling
===

- ```options(error=recover)``` will drop user into ```browser()``` upon an error

- ```options(error=NULL)``` default, do nothing

- ```options(warn=2)``` sets maximum number of warnings to be 2

- ```options(warn=0)``` warnings are stored until top level function finishes

- ```options(warn=-1)``` ignore all warnings

Traceback
===

```traceback()``` shows which function it failed in
```{r}
f <- function(x) { 
  w(x)
	g(h(x)) 
	w(x)
} 
g <- function(x) {
	a <- 10
	x
} 

h <- function(x) {
	w(x) 
	w(x) 
}
	 
w <- function(x) { 
	if (sample(10, 1) == 1) stop("This is an error!")
}

f() 
traceback()
```

Traceback
===
  
```
> f()
Error in w(x) : This is an error! 
> traceback()
5: stop("This is an error!") at #2
4: w(x) at #2
3: h(x) at #3
2: g(h(x)) at #3
1: f()
```

Fix this
===

```larger(x,y)``` is supposed to return the larger of the two vectors element-by-element

```{r}
larger <- function(x, y) { 
  y.is.bigger <- y > x 
	x[y.is.bigger] <- y[y.is.bigger] 
	x
} 
larger(c(1, 5, 10), c(2, 4, 11)) 
larger(c(1, 5, 10), 6)
```

More signs of inexperienced programmers
===

- Violation of the language model
- e.g. R is vector oriented language - for loops should be used sparingly, 
- e.g. use of rbind
- Insufficient knowledge of the language. We’re all guilty of that at different levels 
- Reading other people’s code helps improve our language knowledge!

Removing for loops
===

```{r}
x <- floor(runif(100)*4)
y <- vector("character", length=length(x))
for (i in 1:length(x)) {
   y[i] <- switch (x[i]+1, "Sun", "Rain", "Snow", "Hail", default=NA)
}

table(y)
```

Removing for loops
===
```{r}
# the switch statement on the previous slide is equivalent to the following lines:
for (i in 1:length(x)) {
  if (x[i] == 0) y[i] <- "Sun"
  if (x[i] == 1) y[i] <- "Rain"
  if (x[i] == 2) y[i] <- "Snow"
  if (x[i] == 3) y[i] <- "Hail"
}

# using R's vectors we can reduce this to a single line:
y <- c("Sun", "Rain", "Snow", "Hail")[x+1]
```





Getting better
===

- Read good code, try to emulate
- READ code 
- spot GOOD code - how?
- Re-read your own (old) code CRITICALLY. 
- Possible questions:  how can I break the code?  how can I write this shorter? how can I make this more general?
- Foremost:  PRACTICE!

Spotting bad code
===

- Ken Thompson: keep the number of indentations down, high number of local variables is suspicious
- Hadley Wickham: functions with more than ten lines are suspicious, highly repetitive code
- Generally Good Practices: indentation and spacing, comments, clear naming convention

Profiling
===

- ```system.time()``` and ```proc.time()```
- profr
- optimization example

What is profiling
===

- Collect information on code performance:
- memory usage
- frequency and duration of function calls
- Goal: optimization of code

system.time()
===

- Probably simplest of all measures
- Evaluates the time spent in the whole expression
- doesn’t give any clues about what is done at a lower level

- Alternative: ```proc.time()```

A previous example
===
left:50%

Temperature trends in NASA data

```{r}
nasa <- readRDS(file="../data/nasadata.rds") 
library(ggplot2) 
```
***
```{r}
qplot(time, temperature, group=interaction(x,y), 
      geom="line", data=nasa, alpha=I(0.1))
```

Compute temperature trends
===

```{r}
library(MASS)
# Block #1 
ptm <- proc.time()
nasa.trend<-unique(nasa[,c("x","y")])
nasa.trend$temperature <- 0
ny<-length(unique(nasa$y))
for (i in unique(nasa$x)) {
  for (j in unique(nasa$y)) {
    x <- subset(nasa, x==i&y==j)
    nasa.trend$temperature[(i-1)*ny+j] <- coefficients(rlm(temperature~year+month, data=x))[2]
  }
}
proc.time() - ptm
#   user  system elapsed 
#  7.234   1.287   8.507 
```

Computer temperature trends, second method
===
 
```{r}
# Block #2
library(plyr)
model.fn<-function(x) {
  return(coefficients(rlm(temperature~year+month, data=x))[2])
}

# block 2
ptm <- proc.time()
nasa.trend.plyr<-ddply(nasa, c("x", "y"), model.fn)
proc.time() - ptm
#   user  system elapsed 
#  2.801   0.226   3.016 
```

Computer temperature trends, third method
===

```{r}
library(dplyr)
model.fn2<-function(temperature, year, month) {
  return(coefficients(rlm(temperature~year+month))[2])
}

# block 3
ptm <- proc.time()
nasa.trend.dplyr <- group_by(nasa, x,y) %.%
  summarise(mfn = model.fn2(temperature, year, month))
proc.time() - ptm
#   user  system elapsed 
#  1.953   0.040   2.187 
# relatively small speed-up
```


Profiling Code
===

Second method is much faster than the first. Why?

profr package:
* wrapper around function ```Rprof```
* call stack is written every 0.02 seconds (interval) into a temporary file
* output file is processed to produce a summary of the usage
* time measurements varies by platform: on Unix-alike time is CPU time of the R process (excludes time waiting for input)
* Note: profiling takes time, too; once the timer goes off, the information is not recorded until the next timing click (probably in the range 1–10 msecs). Can’t go below that.


Profiling each of the blocks
===

```{r}
library(profr)
block2 <- profr(
   nasa.trend.plyr<-ddply(nasa, c("x", "y"), model.fn)
)
head(block2, 10)
```

===

```{r, fig.width=25, fig.height=10}
plot(block2)
```

How do these ‘bridges’ occur when plotting the output?