STAT585X
Different data formats
========================================================
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 1/17/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

NETCDF
========================================================

- Scientific binary format
- Self-describing, machine independent
- Typically used for large climate data sets

[Source](http://www.unidata.ucar.edu/software/netcdf/)

NETCDF and R
========================================================

```{r}
library("ncdf")
fo<-open.ncdf("../data/sweden.temp.01-10.nc")
sweden.temp <- get.var.ncdf(fo, "tasol")
dim(sweden.temp)
```

NETCDF and R
========================================================
left: 60%

```{r}
lon <- get.var.ncdf(fo, "lon")
lat <- get.var.ncdf(fo, "lat")
time <- get.var.ncdf(fo, "time")
oneloc <- data.frame(time, 
    temp=sweden.temp[6,1,])
```
***
```{r, echo=FALSE}
library(ggplot2)
qplot(time, temp, data=oneloc, geom="line")
```

GIS FILES 
========================================================

- Maps and associated data are often stored in __G__eographic __I__nformation __S__ystems (GIS)
- Most common form are shapefiles, an open-specification developed and regulated by [ESRI](http://www.esri.com)
- Describes vector features: points, lines, polygons to represent towns, rivers, states
- Come as a collection of three files: ```.shp, .shx, .dbf```

GIS FILES and R
========================================================

- R packages: shapefiles, rgdal, maptools
```{r}
library(maptools)
xx <- readShapeSpatial(
  "../data/australia/region.shp")
object.size(as(xx, "SpatialPolygons"))
xxx <- thinnedSpatialPoly(as(xx, "SpatialPolygons"), 
  tolerance=0.5, minarea=0.001, topologyPreserve=TRUE)
object.size(as(xxx, "SpatialPolygons"))
```

GIS FILES and R
========================================================

```{r, echo=FALSE}
plot(xxx)
```
***
```{r, echo=FALSE}
new_theme_empty <- theme_bw()
new_theme_empty$line <- element_blank()
new_theme_empty$rect <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit")

ggplot(xxx) + 
  aes(long, lat, group=group) + 
  geom_polygon(fill="grey80") +
  geom_path(color="white") +
  coord_equal() + new_theme_empty
```
SOUND FILES and R
========================================================

- ```tuneR``` package enables reading wav and mp3 files
- Summary statistics, plots, spectral analysis

```{r}
library(tuneR)
i1 <- readWave("../data/ilikestatistics1.wav") 
summary(i1)
```

SOUND FILES and R
========================================================

```{r}
i1s <- periodogram(channel(i1, "left"))
summary(i1s)
```

SOUND FILES and R
========================================================

```{r, echo=F}
plot(i1s)
```

IMAGES and R
========================================================
left: 50%

The libraries ```png, jpeg``` can be used to process image into data. 

```{r}
library(png)
nasamap_png <- readPNG("../data/google-map.png")
dim(nasamap_png)
```
***
```{r, echo=FALSE}
library(ggmap)
ggimage(nasamap_png)
```

HDF5 
========================================================

- Hierarchical Data Format (HDF) 
- Binary format designed for massive, complex data
- Developed by [NCSA](http://www.ncsa.illinois.edu/) but now supported by non-profit [hdfgroup](http://www.hdfgroup.org/)

HDF5 and R
========================================================

```{r, verbose=FALSE}
library(hdf5)
song <- hdf5load("../data/TRADDBK128F1483FF8.h5", load=FALSE, verbosity=0, tidy=TRUE)
song$metadata$songs$artist_name
```

[Data source](http://labrosa.ee.columbia.edu/millionsong/pages/getting-dataset)

SAM/BAM FILES 
========================================================

- Major text and binary formats for aligned DNA sequences - very large files!
- Used for studying gene expression

```{r, verbose=FALSE}
# source("http://bioconductor.org/biocLite.R")
# biocLite("Rsamtools")
library(Rsamtools)
bamnormal <- scanBam("../data/normal.bam")[[1]]
names(bamnormal)
length(bamnormal[["qname"]])
table(width(bamnormal[["seq"]]))
```

READING
========================================================

[Rearranging, summarizing data: http://www.jstatsoft.org/v40/i01/](http://www.jstatsoft.org/v40/i01/)

- What is the split-apply-combine strategy?
- Why would you split data?
- Where would this be useful?

Make a blog entry by 3pm Wednesday, Jan 22.
