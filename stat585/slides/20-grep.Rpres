STAT 585X
Regular expressions
===
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 2/28/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

What is 
===

- Regular expressions (regex, regexp) is a sequence of characters that form a search pattern
- Originated in 1950s. American mathematician Stephen Kleene formalized the description of a regular language.
-  Common usage with Unix text processing utilities ed, an editor, and grep (global regular expression print), a filter.
- R language provides this capability through ```grep```, ```gsub```, ...

Example
===

Suppose we want to examine the [undergraduate course offerings at ISU](http://catalog.iastate.edu/azcourses/stat/)

How many courses offer computing?

```{r}
undergrad<-readLines("../data/undergrad.txt")
grep("Computing", undergrad)
undergrad[30]
```

Example
===

I don't care about case, and I just want to look for a stem

```{r}
grep("[cC]omput*", undergrad)
indx <- grep("[cC]omput*", undergrad)
undergrad[indx[1]]
```

Basics
===

- Boolean: ```|``` denotes "or", eg ```gray|grey``` means match "gray" or "grey"
- Grouping: ```()``` denotes grouping, eg ```gr(a|e)y``` same as previous 
- Quantification: 
- ```?``` indicates there is zero or one of the preceding element, eg ```colou?r``` matches "color" or "colour"
- ```* ``` indicates there is zero or more of the preceding element, eg ```ab*c``` matches "ac", "abc", "abbc", "abbbc", ...
- ```+``` indicates there is one or more of the preceding element, eg ```ab+c``` matches "abc", "abbc", "abbbc", ...
- ```.``` matches any single character, eg ```a.c``` matches "abc" or "atc"

Common expressions
===
left: 50%

| expression          | meaning          |
----------------------------|:----------------------------:|
| ordinary characters | match themselves |
|  ```$ ^ { [ ( ) ] } * + ? \```      |   special characters    | 
| ```[abc]``` | matches "a", "b", "c" |
| ```[^abc]``` | matches other than "a", "b", "c" |
| ```[a-gm]``` | matches "a", "b", ... "g" or "m" |
| ```[a-z][0-9]```   | Lower case letter followed by a digit|
| \t \r \v \n | tab, carriage return, vertical tab, new line |
------------------------------------------
***

| expression          | meaning          |
----------------------------|:----------------------------:|
| \x | match a hexadecimal number |
| \s | whitespace |
| ^ | starting position within the string | 
| $ | ending position with in the string | 
| \< \> | start, end of a word |

Examples 
===

What do these do?

```.at```

```[hc]at```

```[^t]at```

```[^hc]at```

```^[S]tat```

```[S]tat$```


Examples
===

```{r}
grep(".at", undergrad)
indx <- grep(".at", undergrad)
undergrad[indx[1]]
```

Matches anything ending in "at"

Examples
===

```{r}
indx <- grep("[hc]at", undergrad)
undergrad[indx[1]]
```

Matches "hat" or "cat"; 

Examples
===

```{r}
indx <- grep("[^t]at", undergrad)
undergrad[indx[1]]
```

Matches anything except "tat"

Examples
===

```{r}
indx <- grep("[^hc]at", undergrad)
indx
undergrad[indx[1]]
```

Matches all "at" words except for "hat" and "cat"

Examples
===

```{r}
indx <- grep("^[S]tat", undergrad)
indx
undergrad[indx[1]]

```

Matches "Stat" at the start of a line

Examples
===

```{r}
indx <- grep("[S]tat$", undergrad)
indx
undergrad[indx[1]]

```

Matches "Stat" at the end of a line

Examples
===

What do these do?

```s.*```
```[A-Z]\{3,\}```
```\[.\]```
```[bB]ar ?[cC]hart```
```^[0-9]{5}$```
```^(\d{3}-\d{3}-\d{4})*$```
```(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})```
