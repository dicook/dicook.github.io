STAT 585X
Interactive graphics
===
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 3/28/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

Couple words on the lab ... 
===

define the map, and get a `clean` data set for cities across the (mainland of) US

```
require(ggplot2)
require(grid)
require(maps)
states <- map_data("state")
map <- ggplot() + 
  geom_polygon(aes(x=long, y=lat,  group = group),
               fill="grey60", size=1, data=states,) + 
  theme_bw() + theme(axis.text=element_blank(), 
                     axis.title=element_blank(),
                     axis.line=element_blank(),
                     axis.ticks=element_blank(),
                     panel.border=element_blank(),
                     panel.grid=element_blank(),
                     aspect.ratio=1/1.5,
                     plot.margin=unit(c(-1,-1,-1,-1), units="cm"))

data(us.cities)
akhi <- which (us.cities$country.etc=="AK"| us.cities$country.etc=="HI" |
                 us.cities$country.etc=="ma")
us.cities <- us.cities[-akhi,]
us.cities$country.etc <- factor(us.cities$country.etc)
n <- nchar(us.cities$name)
us.cities$name <- substr(us.cities$name, 1, n-3)
```

Where should those definitions go?
====

* IDK ...
* locally, the file `ui.R` seems to be called first
* on the server it might be `server.R`

... so one suggestion would be to put this in a separate file and source it in both server.R and ui.R ...
not a good solution, but works

ui.R
===

```
library(shiny)
source("definitions.R")

shinyUI(pageWithSidebar(
  # Application title
  headerPanel("Finding a way"),
  
  # Sidebar with a slider input for number of observations
  sidebarPanel(
    selectInput("state", "State: ", choices=sort(unique(us.cities$country.etc)), selected="IA"),
    uiOutput("cities"),
    actionButton("goButton", "Add to route"),
    width=3
  ),
  
  # Show a plot of the generated distribution
  mainPanel(
    plotOutput("mapPlot"),
    dataTableOutput("mytable"),
    width=9
  )
))
```

server.R
===

```
library(shiny)
source("definitions.R")
vals <- reactiveValues(cities=subset(us.cities, name=="Ames"))


# Define server logic required to generate and plot a random distribution
shinyServer(function(input, output) {
  myCities <- reactive({
    input$goButton # set up the dependency
    
    isolate({
      vals$cities <- rbind(vals$cities, subset(us.cities, name==input$city & country.etc==input$state))
    })   
    vals$cities
  })

  output$cities <- renderUI({
    cities <- subset(us.cities, country.etc==input$state)
    selectInput("city", "City: ", cities$name)
  })
  
  output$mytable = renderDataTable({
    myCities()
  })
```

===

```
  output$mapPlot <- renderPlot({
    print(map + geom_point(aes(long, lat), colour="steelblue", size=3, data=myCities()) + 
            geom_path(aes(long, lat), colour="steelblue", data=myCities()))
  })

})
```


GUIs
===

- Shiny is an example of a graphical user interface (GUI), a way for humans to interact with computers that uses widgets - windows, icons and menus - accessed by a mouse rather than a keyboard.
- In contrast, command line interfaces (CLIs) use text entry and are solely accessible via keyboard.
- GUIs are for new users, beginners, provide limited access to functionality, **you need to make things simple** 
- CLIs are full access, for advanced users.
-  "Some GUIs are good, some are bad, and some you just get used to, appreciating their good points and working around their bad ones." Antony Unwin [JSS paper](http://www.jstatsoft.org/v49/i11/paper)
- A successful GUI should enable the user to access the most useful commands quickly and easily and supply sensible defaults for any options that may be needed. That requires decisions on which commands are most useful, what options are sensible, and how to make the commands available.

GUIs
===

To be intuitive familiar widgets need to be used and mapped to appropriate data elements, that users instinctively know how to use

- Window separates your project from other applications on the screen
- Menus are for lists of choices, accessing categories, eg model choice
- Sliders or scrollbars are for accessing single numerical variables
- Buttons are for turning on or off some aspect, access logical variables
- Check-boxes and radio buttons are for selecting categories, alternatives
- Text boxes are for unstructured information
- Icons to indicate actions/capabilities in reduced space

GUIs
===

Response needs to be fast. When a user takes an action the computer needs to respond quickly. 

Designing a GUI that people find easy to use is hard. You need to know what people need to do most often and make this easy. 

JMP
===

<img src="figures/JMP1.png" alt="hexadecimal image" style="width: 1600px;"/>

<img src="figures/JMP2.png" alt="hexadecimal image" style="width: 600px;"/>
<img src="figures/JMP3.png" alt="hexadecimal image" style="width: 800px;"/>

What do new users have trouble with when using the JMP GUI?

Interactive graphics
===

- gridSVG
- iplots
- plumbr
- cranvas
- anamint

gridSVG
===

Turn ```ggplot2`` graphics into interactive web graphics, by exporting grid objects, and adding actions using javascript.

SVG = Scalable Vector Graphics - images defined in text format, so that they can be searched, indexed, scripted, compressed.

History
===
left: 50%

The original computer displays were vector graphics devices, eg Tektronix 4014. Graphics on the screen were defined by lines instead of bitmapped displays. 

The device draws lines and curves by moving the electron beam exactly where the line is supposed to go, instead of breaking it into dots and scanning the electron beam back and forth, like a television set does. That is, to draw a line from point a to point b, it moves the electron beam to point a, turns it on, moves it directly to point b, and turns it off.

They were FAST!!!

***

<img src="figures/Tektronix_4014.jpg" alt="hexadecimal image" style="width: 1200px;"/>

Raster graphics
===

Dot matrix displays - a rectangular grid of points and associated color value.

Dominated the computer screen market since the late 1980s. 

Need more pixels to have clear image.

```{r}
library(png)
nasamap_png <- readPNG("../data/google-map.png")
dim(nasamap_png)
nasamap_png[300, 301:305, ]
```

SVG
===

The SVG specification has been in development since 1999, developed by the [World Wide Web Consortium](http://en.wikipedia.org/wiki/World_Wide_Web_Consortium) (W3C) 

Specify graphics using drawing operations. More technical spcification, could generate very precise, geometric-defined representations.

This will draw a blue rectangle with a black outline:

```
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
  <rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)" />
</svg>
```

Most, but not all, browsers support the format and can render the XML. 

gridSVG Example
===

```{r echo=FALSE}
library(gridSVG)
library(ggplot2)
library(lubridate)
library(GGally)
library(grid)

# Read data, and create new variables
nasa <- read.csv("../data/nasadata.csv", 
                 stringsAsFactors = FALSE)
nasa$date <- ymd(nasa$date)
nasa$day <- (nasa$date - min(nasa$date)) / ddays(1)
nasa$month <- month(nasa$date)
nasa$year <- year(nasa$date)

# Select one location
nasa.oneloc <- subset(nasa, y==1&x==1)
```

```
library(grid)
ggparcoord(nasa.oneloc, columns=c(7:10,13))
grobs <- grid.ls()
gnames <- grobs$name
pnames <- gnames[grep("GRID.polygon", gnames)]
for (i in unique(pnames)) { 
  grid.garnish(i,
               onmouseover=paste("frame(evt)", sep=""),
               onmouseout=paste("deframe(evt)", sep="") )
}
lnames <- gnames[grep("GRID.polyline", gnames)]
for (i in unique(lnames)) { 
  grid.garnish(i,
               onmouseover=paste("frame(evt)", sep=""),
               onmouseout=paste("deframe(evt)", sep="") )
}
grid.script(filename="http://dicook.github.io/stat585/action-2.js")
grid.export("parcoords.svg", exportCoords="inline", exportJS="inline", htmlWrapper=TRUE)
```

gridSVG
===

```{r fig.align='center', fig.width=10, echo=FALSE}
# Doesn't work inside of RStudio, it seems
# Turn this into an interactive svg
library(grid)
ggparcoord(nasa.oneloc, columns=c(7:10,13))
grobs <- grid.ls()
gnames <- grobs$name
pnames <- gnames[grep("GRID.polygon", gnames)]
for (i in unique(pnames)) { 
  grid.garnish(i,
               onmouseover=paste("frame(evt)", sep=""),
               onmouseout=paste("deframe(evt)", sep="") )
}
lnames <- gnames[grep("GRID.polyline", gnames)]
for (i in unique(lnames)) { 
  grid.garnish(i,
               onmouseover=paste("frame(evt)", sep=""),
               onmouseout=paste("deframe(evt)", sep="") )
}
grid.script(filename="http://dicook.github.io/stat585/action-2.js")
grid.export("parcoords.svg", exportCoords="inline", exportJS="inline", htmlWrapper=TRUE)
```

parcoords.svg
===

```
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="798px" height="477px" viewBox="0 0 798 477" version="1.1">
....
  <script type="application/ecmascript"><![CDATA[
var gridSVGCoords = {
 "ROOT": {
 "x":      0,
"y":      0,
"width":    798,
"height":    477,
...
  <g transform="translate(0, 477) scale(1, -1)">
    <g id="gridSVG" fill="rgb(255,255,255)" stroke="rgb(0,0,0)" stroke-dasharray="none" stroke-width="0.75" font-size="16" font-family="Helvetica, Arial, 
....
```

interactive lineups in SVG format
===

... example in browser ... 

<img src="figures/filec2a75f08a287-multiple.svg" alt="interactive lineup" style="width: 1600px;"/>

[figures/filec2a75f08a287-multiple.svg]

===

```
lineup <- function(method, dframe, filename, script, toggle="toggle") {
  z = as.list(match.call()[-1])
  
  eval(call(z$method, dframe))
  require(gridSVG)
  grobs <- grid.ls()
  
  idx <- grep("panel-", grobs$name)
  for (i in idx) { 
    grid.garnish(grobs$name[i],
                 onmouseover=paste("frame('",grobs$name[i+2], ".1')", sep=""),
                 onmouseout=paste("deframe('",grobs$name[i+2], ".1')", sep=""), 
                 onmousedown=paste(sprintf("%shigh(evt, '", toggle),grobs$name[i+2], ".1')", sep=""))
  }

  # use script on server to get locally executable javascript code
  # or use inline option
  grid.script(filename=script)
  gridToSVG(filename)
}

lineup("std_lineup", data, filename= sprintf("%s-multiple.svg", stdname_i_m), toggle="toggle", script="http://www.hofroe.net/examples/lineup/action.js")
```
