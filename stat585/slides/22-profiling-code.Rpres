STAT 585X
Profiling code
===
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 3/5/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

Exercise 1: Critiquing code
===

Open the code file ```average_sp.R``` in your R editor

- Name several features of the code that are less than ideal: Repeated code, where error intercepts/msgs might be used, specialist code (bulldozer?)
- Name one advanced feature of the code

Exercise 2: Building from others work
===

Open the file ```hotellingsT2-confidence.R``` in your R editor

- What does this function do?
- Find a routine in an existing R package that could replace some of the code in this function.

Exercise 3: Profiling Code
===

The riverplot package is a new package posted on CRAN  a few days ago. It allows to draw Sankey diagrams from graphs.
Use the tools from the class to profile the ```makeRiver``` function. Identify  slow expressions/statements in the function and try to find an improvement. Document your procedure.

```
install.packages("riverplot", repos = "http://cran.us.r-project.org")
library(riverplot)
?makeRiver
```


Exercise 4: Temperature trends in NASA data
====

We have been discussing two blocks of code, block #1 and block #2, for computing temperature trends in the NASA data set. 
The goal of this week's lab is to profile the code in block #1 and make (small) changes to it to increase its execution speed. 
By small we mean that you should not change the code chunk completely (we already know that block #2 or #3 are faster), but identify the slow routines/statements in the block and try to replace these with faster alternatives. 
For your report, keep track of the ideas you had (together with a motivation of what gave you the idea) and the execution times, even if the idea did not lead to a speed-up. This will give us a list of things that worked and that did not work. 

Aim for a final speed-up of at least 30% based on the original runtime of block #1

Block #1
===

```{r}
nasa <- readRDS(file="../data/nasadata.rds") 
library(MASS)
# Block #1 
ptm <- proc.time()
nasa.trend<-unique(nasa[,c("x","y")])
nasa.trend$temperature <- 0
ny<-length(unique(nasa$y))
for (i in unique(nasa$x)) {
  for (j in unique(nasa$y)) {
    x <- subset(nasa, x==i&y==j)
    nasa.trend$temperature[(i-1)*ny+j] <- coefficients(rlm(temperature~year+month, data=x))[2]
  }
}
proc.time() - ptm
#   user  system elapsed 
#  7.234   1.287   8.507 
```

Computer temperature trends, second method
===
 
```{r}
# Block #2
library(plyr)
model.fn<-function(x) {
  return(coefficients(rlm(temperature~year+month, data=x))[2])
}

# block 2
ptm <- proc.time()
nasa.trend.plyr<-ddply(nasa, c("x", "y"), model.fn)
proc.time() - ptm
#   user  system elapsed 
#  2.801   0.226   3.016 
```

