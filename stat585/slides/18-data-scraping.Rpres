STAT 585X
more data scraping
===
font-import: http://fonts.googleapis.com/css?family=Marcellus
font-family: 'Marcellus'
author: Di Cook, Heike Hofmann
date: 2/24/2014
width: 1680
height: 1050

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
options(width=80)
```

Outline
====

* XML package, structure of html
* twitter data


XML package
===

So far we have only used ```readHTMLTables```

Data can come in different formats outside of tables, e.g. we might be interested in linking baseball player's salaries to their performance [http://www.baseball-reference.com/players/]:

```
Search the Baseball-Reference.com Baseball Encyclopedia of Players by the first letter of the player's last name, or use the search box above. 
Players listed are among the most looked for. 
Bold indicates active player and + indicates a Hall of Famer. 

A  Hank Aaron+, Luis Aparicio+, Roberto Alomar+, Luke Appling+, Earl Averill+, Richie Ashburn+,...
B	Yogi Berra+, George Brett+, Ernie Banks+, Johnny Bench+, Jim Bunning+, Wade Boggs+,...
C	Rod Carew+, Roberto Clemente+, Steve Carlton+, Gary Carter+, Orlando Cepeda+, Roger Clemens,...
D	Bill Dickey+, Joe DiMaggio+, Don Drysdale+, Andre Dawson+, Larry Doby+, Bobby Doerr+,...
E	Dennis Eckersley+, Buck Ewing+, Bob Elliott, Johnny Evers+, Jim Edmonds, Dwight Evans,...
F	Nellie Fox+, Whitey Ford+, Carlton Fisk+, Bob Feller+, Jimmie Foxx+, Rollie Fingers+,...
G	Tony Gwynn+, Tom Glavine+, Bob Gibson+, Rich Gossage+, Lefty Grove+, Ken Griffey,...
H	Rickey Henderson+, Billy Herman+, Catfish Hunter+, Carl Hubbell+, Roy Halladay , Torii Hunter ,...
I	 Raul Ibanez , Monte Irvin+, Omar Infante , Brandon Inge , Cesar Izturis , Jason Isringhausen,...
J	 Derek Jeter , Reggie Jackson+, Fergie Jenkins+, Randy Johnson, Walter Johnson+, Travis Jackson+,...
K	Al Kaline+, Harmon Killebrew+, George Kell+, Sandy Koufax+, Ralph Kiner+, Paul Konerko ,...
L	Barry Larkin+, Ernie Lombardi+, Bob Lemon+, Derek Lowe , Ted Lyons+, Al Lopez+,...
```

Scraping individual players
====

We would need to follow each of the player's link to get to their salary information 

How can we automate that?

The information is in the html source file:

```
<table width="100%" border=0 cellspacing=5 cellpadding=3>
<tr><td align=center valign=bottom class="xx_large_text bold_text"><a href="/players/a/">A</a></td>
<td valign=center><a href="/players/a/aaronha01.shtml" title="">Hank Aaron</a>+, <a href="/players/a/aparilu01.shtml" title="">Luis Aparicio</a>+, <a href="/players/a/alomaro01.shtml" title="">Roberto Alomar</a>+, <a href="/players/a/applilu01.shtml" title="">Luke Appling</a>+, <a href="/players/a/averiea01.shtml" title="">Earl Averill</a>+, <a href="/players/a/ashburi01.shtml" title="">Richie Ashburn</a>+,...</td>
</td>
<tr><td align=center valign=bottom class="xx_large_text bold_text"><a href="/players/b/">B</a></td>
<td valign=center><a href="/players/b/berrayo01.shtml" title="">Yogi Berra</a>+, <a href="/players/b/brettge01.shtml" title="">George Brett</a>+, <a href="/players/b/bankser01.shtml" title="">Ernie Banks</a>+, <a href="/players/b/benchjo01.shtml" title="">Johnny Bench</a>+, <a href="/players/b/bunniji01.shtml" title="">Jim Bunning</a>+, <a href="/players/b/boggswa01.shtml" title="">Wade Boggs</a>+,...</td>
</td>
<tr><td align=center valign=bottom class="xx_large_text bold_text"><a href="/players/c/">C</a></td>
<td valign=center><a href="/players/c/carewro01.shtml" title="">Rod Carew</a>+, <a href="/players/c/clemero01.shtml" title="">Roberto Clemente</a>+, <a href="/players/c/carltst01.shtml" title="">Steve Carlton</a>+, <a href="/players/c/cartega01.shtml" title="">Gary Carter</a>+, <a href="/players/c/cepedor01.shtml" title="">Orlando Cepeda</a>+, <a href="/players/c/clemero02.shtml" title="">Roger Clemens</a>,...</td>
</td>
<tr><td align=center valign=bottom class="xx_large_text bold_text"><a href="/players/d/">D</a></td>
<td valign=center><a href="/players/d/dickebi01.shtml" title="">Bill Dickey</a>+, <a href="/players/d/dimagjo01.shtml" title="">Joe DiMaggio</a>+, <a href="/players/d/drysddo01.shtml" title="">Don Drysdale</a>+, <a href="/players/d/dawsoan01.shtml" title="">Andre Dawson</a>+, <a href="/players/d/dobyla01.shtml" title="">Larry Doby</a>+, <a href="/players/d/doerrbo01.shtml" title="">Bobby Doerr</a>+,...</td>
</td>
<tr><td align=center valign=bottom class="xx_large_text bold_text"><a href="/players/e/">E</a></td>
<td valign=center><a href="/players/e/eckerde01.shtml" title="">Dennis Eckersley</a>+, <a href="/players/e/ewingbu01.shtml" title="">Buck Ewing</a>+, <a href="/players/e/elliobo01.shtml" title="">Bob Elliott</a>, <a href="/players/e/eversjo01.shtml" title="">Johnny Evers</a>+, <a href="/players/e/edmonji01.shtml" title="">Jim Edmonds</a>, <a href="/players/e/evansdw01.shtml" title="">Dwight Evans</a>,...</td>
</td>

===

Unfortunately, ```readHTMLTable``` is too limited

```{r}
library(XML)
url <- "http://www.baseball-reference.com/players/"
tables <- readHTMLTable(url)
head(tables[[1]])
```

HTML has a tree structure
===

![alt text](18-html-structure.png "HTML has a tree structure")

XML package commands
===


```{r}
url <- "http://www.baseball-reference.com/players/"
# read the document from source
doc <- htmlParse(url)
# find the root of the document
root <- xmlRoot(doc)

length(xmlChildren(root))
xmlName(xmlChildren(root)[[2]])
length(xmlChildren(xmlChildren(root)[[2]]))
```

Extracting information from the HTML source
===

We could work through the tree structure layer by layer, but this is cumbersome

Instad we use `getNodeSet(doc, path)` ... we let R do the tree parsing and collect all nodes of a particular type (path)

`path` is an XPath expression (see e.g. [http://www.w3schools.com/xpath/]): 

We distinguish values (elements) and attributes (descriptions of elements), e.g.:

 * `//table`
Selects all table elements no matter where they are in the document

 * `//@width`
Selects all attributes that are named width

 * `//table[@width]`
Selects all attributes that are named width from table elements only

 * `tr`
Selects all children from the current node called ‘tr’

In our example ...
===

Uncomment the code to run it in a local environment - for some reason it crashes the R presentation ...
```{r}
# there is one table
#length(getNodeSet(root, "//table"))
# the width argument is set three times 
#length(getNodeSet(root, "//@width"))
# and once the width of the table is set
#length(getNodeSet(root, "//table[@width]"))
```                  

====
We are really interested in the links (hyperrefs):
```{r}
# links <- getNodeSet(root, "//a[@href]")
# library(plyr)
# linksDF <- ldply(links, function(x) xmlAttrs(x)["href"])
# linksDF <- linksDF[grep("players/", linksDF$href), , drop=FALSE]
# linksDF <- linksDF[grep("html", linksDF$href), , drop=FALSE]
# write.csv(linksDF, "linksDF.csv", row.names=FALSE)
linksDF <- read.csv("../data/linksDF.csv")
head(linksDF)
```
 now let's get the salaries ... 
 
Finishing up the scraping
===

```{r}
library(plyr)
url <- "http://www.baseball-reference.com/"
salaries <- ldply(head(linksDF$href), function(x) {
  res <- readHTMLTable(paste(url, x, sep=""))$salaries
  res$player <- x
  res
})
head(salaries)
```
... now the data cleaning can start ...


Tweets 
===

How do we get information off Twitter?

![alt text](18-rstats.png "Word cloud of tweets with #rstats")
***

![alt text](18-bigdata-hadoop.png "Word cloud of tweets with #bigdata and #hadoop")


package `twitteR`
===

The `twitteR` package is written by Jeff Gentry, and provides an interface to the twitter API

After you are authorized to get access (non trivial, see [http://thinktostart.wordpress.com/2013/05/22/twitter-authentification-with-r/] for details), you can search twitter:

```{r}
# library(twitteR)
# rsTweets <- searchTwitter('#rstats', n=500)
# saveRDS(rsTweets, file="../data/rsTweets.RData")
rsTweets <- readRDS("../data/rsTweets.RData")
str(rsTweets[[1]])
```

Tweets are more than just text ...
===

```{r}
rsTweets[[1]]$getText()
rsTweets[[1]]$getScreenName()
library(plyr)
tweets.df = ldply(rsTweets, function(t) t$toDataFrame())
names(tweets.df)
```

What is trending?
===

```{r}
# locs <- availableTrendLocations()
# chicago: 2379574
# minneapolis: 2452078
# houston: 2424766
# t1 <- getTrends(2424766)
```

***
![alt text](18-apple-security.png "Apple's security flaw")
